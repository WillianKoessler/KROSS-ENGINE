#pragma once

#include "Kross/Core/Core.h"

#if KROSS_GLAD
#include <GLAD/include/glad/glad.h>	// Initialize with gladLoadGL()
#elif defined(KROSS_GL3W)
#include <GL3W/gl3w.h>	// Initialize with gl3wInit()
#elif defined(KROSS_GLEW)
#include <GLEW/glew.h>	// Initialize with glewInit()
#endif

#if KROSS_DEBUG
    #define glCall(x) { KROSS_PROFILE_SCOPE(#x); x; glError(#x, __FILE__, __LINE__).handle(); }
#else
    #define glCall(x) x                                      
#endif

static void GLAPIENTRY glDebugMessage(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
{
	char *ctype = "Unknown", *cseverity = "Unknown", *csource = "Unknown", *cid = "Unknown";
	switch (source)
	{
		case GL_DEBUG_SOURCE_API: { csource = "API"; break; }							//Calls to the OpenGL API
		case GL_DEBUG_SOURCE_WINDOW_SYSTEM: { csource = "WINDOW_SYSTEM"; break; }		//Calls to a window - system API
		case GL_DEBUG_SOURCE_SHADER_COMPILER: { csource = "SHADER_COMPILER"; break; }	//A compiler for a shading language
		case GL_DEBUG_SOURCE_THIRD_PARTY: { csource = "THIRD_PARTY"; break; }			//An application associated with OpenGL
		case GL_DEBUG_SOURCE_APPLICATION: { csource = "APPLICATION"; break; }			//Generated by the user of this application
		case GL_DEBUG_SOURCE_OTHER: { csource = "OTHER"; break; }						//Some source that isn't one of these
	}

	switch (type)
	{
		case GL_DEBUG_TYPE_ERROR: { ctype = "ERROR"; break; }								//An error, typically from the API
		case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: { ctype = "DEPRECATED_BEHAVIOR"; break; }	//Some behavior marked deprecated has been used
		case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: { ctype = "UNDEFINED_BEHAVIOR"; break; }		//Something has invoked undefined behavior
		case GL_DEBUG_TYPE_PORTABILITY: { ctype = "PORTABILITY"; break; }					//Some functionality the user relies upon is not portable
		case GL_DEBUG_TYPE_PERFORMANCE: { ctype = "PERFORMANCE"; break; }					//Code has triggered possible performance issues
		case GL_DEBUG_TYPE_MARKER: { ctype = "MARKER"; break; }								//Command stream annotation
		case GL_DEBUG_TYPE_PUSH_GROUP: { ctype = "PUSH_GROUP"; break; }						//Group pushing
		case GL_DEBUG_TYPE_POP_GROUP: { ctype = "POP_GROUP"; break; }						//Group popping
		case GL_DEBUG_TYPE_OTHER: { ctype = "OTHER"; break; }								//Some type that isn't one of these
	}
	switch (severity)
	{
		case GL_DEBUG_SEVERITY_HIGH: { cseverity = "HIGH"; break; }			//All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior
		case GL_DEBUG_SEVERITY_MEDIUM: { cseverity = "MEDIUM"; break; }		//Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality
		case GL_DEBUG_SEVERITY_LOW: { cseverity = "LOW"; break; }			//Redundant state change performance warning, or unimportant undefined behavior
	}
	switch (id)
	{
		case GL_INVALID_ENUM: { cid = "INVALID_ENUM"; break; }
		case GL_INVALID_VALUE: { cid = "GL_INVALID_VALUE"; break; }
		case GL_INVALID_OPERATION: { cid = "GL_INVALID_OPERATION"; break; }
		case GL_INVALID_FRAMEBUFFER_OPERATION: { cid = "GL_INVALID_FRAMEBUFFER_OPERATION"; break; }
		case GL_OUT_OF_MEMORY: { cid = "GL_OUT_OF_MEMORY"; break; }
		case GL_STACK_UNDERFLOW: { cid = "GL_STACK_UNDERFLOW"; break; }
	}

	KROSS_ERROR("****GL CALLBACK****");
	KROSS_ERROR("\tTYPE: {0}", ctype);
	KROSS_ERROR("\tSEVERITY: {0}", cseverity);
	KROSS_ERROR("\tSOURCE: {0}", csource);
	KROSS_ERROR("\tID: {0}", cid);
	KROSS_ERROR("\tMESSAGE: {0}", message);
	KROSS_DEBUGBREAK();
}

class glError
{
    static bool active;
    static unsigned int count;
	static std::vector<glError> cache;
	std::string func;
	std::string file;
	int line;
    std::vector<unsigned int> codes;
	unsigned int code, id;
public:

    glError(const std::string& func_, const std::string& file_, int line_);
    glError(const std::string& func_, const std::string& file_, int line_, unsigned int code_);

    static void glGetErrors(const char* function, const char* file, int line);
    static void Begin();
    static void flushCache();
    static bool handled(const glError& error);
    static void display(const glError& error);
    static void display(unsigned int code);

	bool hasError();
	bool handle();
    operator unsigned int();
}; 
